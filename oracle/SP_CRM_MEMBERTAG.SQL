create or replace PROCEDURE "SP_CRM_MEMBERTAG" (
	P_EID		IN	VARCHAR2,	--企业ID
	P_TAGID		IN	VARCHAR2,	--标签ID
	P_Checker	IN	VARCHAR2	--审核人
)
AS
-------------------------------------------------------------------
--名称：会员标签打标
--说明：
--参数：单据号，审核人
--返回：标志0=成功
--表：
--函数：
--调用存储过程：
--备注：
--创建者   : JW
--创建时间 : 2017-07-25
--修改记录：
--20220901改：將簡體字「人群定义自动生成」調整為繁體字『人群定義自動生成』
-------------------------------------------------------------------
V_BreakPoint			VARCHAR2(255);
V_Err				INTEGER;
V_Msg				VARCHAR2(255);

V_BillType			VARCHAR2(32);

V_ID 				VARCHAR2(64);

V_CRM_TYPE			VARCHAR2(128);
V_CRM_WXY_MEMBERTAGID			VARCHAR2(128);



BEGIN
	V_BreakPoint:= 'SP_CRM_MEMBERTAG';
	V_Err := -20001;

	V_ID := sys_guid();

	V_BillType := 'CRM022';


  --味多美标签逻辑处理 (刷新标签前清理)
	V_CRM_TYPE := F_CRM_TYPE(P_EID);
	V_Crm_Wxy_Membertagid := F_Crm_Getparam(P_Eid, 'CRM_WXY_MEMBERTAGID');


FOR R1 IN (SELECT *
		FROM CRM_MEMBERSEARCH
		WHERE EID = P_EID
		  AND SEARCHID = P_TAGID
		)
	LOOP
  --1.生成标签
	UPDATE CRM_MEMBERTAGTYPE SET Status = R1.STATUS, TAGNAME = R1.SEARCHNAME,REMARK = '人群定義自動生成' --20220901改：原為 人群定义自动生成
	WHERE EID=P_EID
	AND TAGID = P_TAGID;
	IF (SQL%ROWCOUNT = 0) OR (SQL%ROWCOUNT IS NULL) THEN

		INSERT INTO CRM_MEMBERTAGTYPE(
			EID,	TAGID,		TAGNAME,	GROUPID,	DESCRIPTION,
			REMARK,	STATUS,		CREATEOPID,	CREATETIME,	LASTMODIOPID,
			LASTMODITIME
		)
		VALUES
		(
			P_EID,	P_TAGID,	R1.SEARCHNAME,	'',		'',
			'人群定義自動生成',R1.STATUS,	P_Checker,	SYSDATE,	P_Checker, --20220901改：原為 人群定义自动生成
			SYSDATE
		);
	END IF;

	--生成自动打标规则
	UPDATE CRM_MEMBERTAGRULE SET STATUS = R1.STATUS,RULEDESCRIPTION = R1.SEARCHNAME
	WHERE EID = P_EID
	  AND TAGID = P_TAGID;
	IF (SQL%ROWCOUNT = 0) OR (SQL%ROWCOUNT IS NULL) THEN
		INSERT INTO CRM_MEMBERTAGRULE(
			EID,	TAGID,		RULEDESCRIPTION,	DATETYPE,	DATETYPEVALUE,
			REMARK,	STATUS,		CREATEOPID,		CREATETIME,	LASTMODIOPID,
			LASTMODITIME
		)
		VALUES
		(
			P_EID,	P_TAGID,	R1.SEARCHNAME,		2,		1,
			'人群定義自動生成',	R1.STATUS,		P_Checker,	SYSDATE,	P_Checker, --20220901改：原為 人群定义自动生成
			SYSDATE
		);

		INSERT INTO CRM_MEMBERTAGRULEITEM(
			EID,		TAGID,		SERIALNO,		SEARCHID,	LASTMODIOPID,
			LASTMODITIME
		)
		VALUES
		(
			P_EID,		P_TAGID,	1,			P_TAGID,	P_Checker,
			SYSDATE
		);

	END IF;
  end loop;



	IF (V_CRM_TYPE = 'WXY' AND V_CRM_WXY_MEMBERTAGID is not null and V_CRM_WXY_MEMBERTAGID = P_TAGID) THEN
	  INSERT INTO CRM_MEMBERTAG_SYNC(ID, EID,MEMBERID,TAGID,SOURCEBILLTYPE,SOURCEBILLNO,SOURCESERIALNO,
				CREATEOPID,CREATETIME,LASTMODIOPID,LASTMODITIME, OPRTYPE)
	  SELECT sys_guid(), a.EID,a.MEMBERID, V_CRM_WXY_MEMBERTAGID, a.SOURCEBILLTYPE, a.SOURCEBILLNO, a.SOURCESERIALNO,
		P_Checker,	SYSDATE,	P_Checker,	SYSTIMESTAMP, 2
	  FROM CRM_MEMBERTAG a
    WHERE a.EID = P_EID and a.TAGID = P_TAGID;
	END IF;

  Delete From Crm_Membertag
    where eid=P_EID and TAGID=P_TAGID;


	INSERT INTO CRM_MEMBERTAGLOG(EID,	BILLNO,		BILLTYPE,	BILLDATE,	REMARK,		OPRTYPE,
					STATUS,	CREATEOPID,	CREATETIME,	LASTMODIOPID,	LASTMODITIME
					)
				VALUES
					(
					P_EID,	V_ID,		V_BillType,	trunc(SYSDATE),	'',		1,
					0,	P_Checker,	SYSDATE,	P_Checker,	SYSDATE
					);

	INSERT INTO CRM_MEMBERTAGLOGITEM2(EID,	BILLNO,		TAGID,
					LASTMODIOPID,	LASTMODITIME
					)
				VALUES
					(
					P_EID,	V_ID,		P_TAGID,
					P_Checker,	SYSDATE
					);



	FOR C1 IN (SELECT SEARCHID
		FROM CRM_MEMBERTAGRULEITEM
		WHERE EID = P_EID
		  AND TAGID = P_TAGID
		)
	LOOP

		INSERT INTO CRM_MEMBERTAGLOGITEM1(EID,	BILLNO,		MEMBERID,	LASTMODIOPID,	LASTMODITIME)

		SELECT P_EID,V_ID,COLUMN_VALUE,P_Checker,SYSDATE FROM TABLE(F_CRM_GetQueryMember(P_EID,C1.SEARCHID)) a
		WHERE NOT EXISTS(select 8 from  CRM_MEMBERTAGLOGITEM1 b where b.EID = P_EID and b.BILLNO = V_ID and a.COLUMN_VALUE = b.MEMBERID);

	End Loop;

	SP_CRM_MEMBERTAGLOG_CHECK(P_EID,V_ID,P_Checker);

EXCEPTION WHEN OTHERS THEN
	Raise_Application_Error(-20001, v_BreakPoint || '-' || SQLERRM);
END;
